{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { save_action_success, save_all_promotions } from \"../actions/promotion\";\nimport { DELETE_PROMOTION_BY_ID, GET_ALL_PROMOTIONS, PUT_PROMOTION_DATA, CHANGE_HOTSALE_BANNER, ASSIGN_A_NEW_HOT_SALE, CREATE_A_NEW_PROMOTION } from \"../constants/ActionTypes\";\nimport { controllerGetAllPromotions, controllerUpdatePromotion, controllerDeletePromotion, controllerCreatePromotion } from \"../services/service\";\n\nconst getallPromotionsRequest = async () => await controllerGetAllPromotions().then(response => response).catch(error => error);\n\nconst deletePromotionByIdRequest = async (id) => await controllerDeletePromotion(id).then(response => response).catch(error => error);\n\nconst createANewPromotionRequest = async (data) => await controllerCreatePromotion(data).then(response => response).catch(error => error);\n\nconst putPromotionRequest = async (data) => await controllerUpdatePromotion(data).then(response => response).catch(error => error);\n\nconst putChangePromotionRequest = async ({\n  imgDisable,\n  imgEnable\n}) => await Promise.all([controllerUpdatePromotion(imgDisable), controllerUpdatePromotion(imgEnable)]).then(response => response).catch(error => error);\n\nfunction* getAllPromotionsData() {\n  try {\n    const all = yield call(getallPromotionsRequest);\n\n    if (all != null && all.success) {\n      yield put(save_all_promotions(all));\n    } else {\n      yield put(save_all_promotions(all));\n    }\n  } catch (error) {\n    yield put(save_all_promotions(all));\n  }\n}\n\nfunction* deletePromotionByIdData({\n  payload\n}) {\n  try {\n    let Id = payload;\n    const deletePromotion = yield call(deletePromotionByIdRequest, Id);\n\n    if (deletePromotion != null && deletePromotion.success) {\n      yield put(save_action_success(deletePromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* createANewPromotionData({\n  payload\n}) {\n  try {\n    const createPromotion = yield call(createANewPromotionRequest, payload);\n\n    if (createPromotion != null && createPromotion.success) {\n      yield put(save_action_success(createPromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* putPromotionData({\n  payload\n}) {\n  try {\n    const putPromotion = yield call(putPromotionRequest, payload);\n\n    if (putPromotion != null && putPromotion.success) {\n      yield put(save_action_success(putPromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* putChangePromotionData({\n  payload\n}) {\n  try {\n    const putChangePromotion = yield call(putChangePromotionRequest, payload);\n\n    if (putChangePromotion[0] != null && putChangePromotion[1] != null && putChangePromotion[0].success && putChangePromotion[1].success) {\n      yield put(save_action_success(putChangePromotion[0].success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nexport function* getAllPromotions() {\n  yield takeEvery(GET_ALL_PROMOTIONS, getAllPromotionsData);\n}\nexport function* deletePromotionById() {\n  yield takeEvery(DELETE_PROMOTION_BY_ID, deletePromotionByIdData);\n}\nexport function* createANewPromotion() {\n  yield takeEvery(CREATE_A_NEW_PROMOTION, createANewPromotionData);\n}\nexport function* putPromotion() {\n  yield takeEvery(PUT_PROMOTION_DATA, putPromotionData);\n}\nexport function* putChangePromotion() {\n  yield takeEvery(CHANGE_HOTSALE_BANNER, putChangePromotionData);\n}\nexport function* assignANewHotSalePromotion() {\n  yield takeEvery(ASSIGN_A_NEW_HOT_SALE, putPromotionData);\n}\nexport default function* rootSaga() {\n  yield all([fork(getAllPromotions), fork(deletePromotionById), fork(putPromotion), fork(putChangePromotion), fork(assignANewHotSalePromotion), fork(createANewPromotion)]);\n}","map":{"version":3,"sources":["/Users/isracarballo/Desktop/DEV REPO/Promotions/client/src/sagas/promotion.js"],"names":["all","call","fork","put","takeEvery","save_action_success","save_all_promotions","DELETE_PROMOTION_BY_ID","GET_ALL_PROMOTIONS","PUT_PROMOTION_DATA","CHANGE_HOTSALE_BANNER","ASSIGN_A_NEW_HOT_SALE","CREATE_A_NEW_PROMOTION","controllerGetAllPromotions","controllerUpdatePromotion","controllerDeletePromotion","controllerCreatePromotion","getallPromotionsRequest","then","response","catch","error","deletePromotionByIdRequest","id","createANewPromotionRequest","data","putPromotionRequest","putChangePromotionRequest","imgDisable","imgEnable","Promise","getAllPromotionsData","success","deletePromotionByIdData","payload","Id","deletePromotion","createANewPromotionData","createPromotion","putPromotionData","putPromotion","putChangePromotionData","putChangePromotion","getAllPromotions","deletePromotionById","createANewPromotion","assignANewHotSalePromotion","rootSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { save_action_success, save_all_promotions } from \"../actions/promotion\";\nimport {\n  DELETE_PROMOTION_BY_ID,\n  GET_ALL_PROMOTIONS,\n  PUT_PROMOTION_DATA,\n  CHANGE_HOTSALE_BANNER,\n  ASSIGN_A_NEW_HOT_SALE,\n  CREATE_A_NEW_PROMOTION,\n} from \"../constants/ActionTypes\";\nimport {\n  controllerGetAllPromotions,\n  controllerUpdatePromotion,\n  controllerDeletePromotion,\n  controllerCreatePromotion,\n} from \"../services/service\";\n\nconst getallPromotionsRequest = async () =>\n  await controllerGetAllPromotions()\n    .then((response) => response)\n    .catch((error) => error);\n\nconst deletePromotionByIdRequest = async (id) =>\n  await controllerDeletePromotion(id)\n    .then((response) => response)\n    .catch((error) => error);\n\nconst createANewPromotionRequest = async (data) =>\n  await controllerCreatePromotion(data)\n    .then((response) => response)\n    .catch((error) => error);\n\nconst putPromotionRequest = async (data) =>\n  await controllerUpdatePromotion(data)\n    .then((response) => response)\n    .catch((error) => error);\n\nconst putChangePromotionRequest = async ({ imgDisable, imgEnable }) =>\n  await Promise.all([\n    controllerUpdatePromotion(imgDisable),\n    controllerUpdatePromotion(imgEnable),\n  ])\n    .then((response) => response)\n    .catch((error) => error);\n\nfunction* getAllPromotionsData() {\n  try {\n    const all = yield call(getallPromotionsRequest);\n    if (all != null && all.success) {\n      yield put(save_all_promotions(all));\n    } else {\n      yield put(save_all_promotions(all));\n    }\n  } catch (error) {\n    yield put(save_all_promotions(all));\n  }\n}\n\nfunction* deletePromotionByIdData({ payload }) {\n  try {\n    let Id = payload;\n    const deletePromotion = yield call(deletePromotionByIdRequest, Id);\n    if (deletePromotion != null && deletePromotion.success) {\n      yield put(save_action_success(deletePromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* createANewPromotionData({ payload }) {\n  try {\n    const createPromotion = yield call(createANewPromotionRequest, payload);\n    if (createPromotion != null && createPromotion.success) {\n      yield put(save_action_success(createPromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* putPromotionData({ payload }) {\n  try {\n    const putPromotion = yield call(putPromotionRequest, payload);\n    if (putPromotion != null && putPromotion.success) {\n      yield put(save_action_success(putPromotion.success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nfunction* putChangePromotionData({ payload }) {\n  try {\n    const putChangePromotion = yield call(putChangePromotionRequest, payload);\n    if (\n      putChangePromotion[0] != null &&\n      putChangePromotion[1] != null &&\n      putChangePromotion[0].success &&\n      putChangePromotion[1].success\n    ) {\n      yield put(save_action_success(putChangePromotion[0].success));\n    } else {\n      yield put(save_action_success(false));\n    }\n  } catch (error) {\n    yield put(save_action_success(false));\n  }\n}\n\nexport function* getAllPromotions() {\n  yield takeEvery(GET_ALL_PROMOTIONS, getAllPromotionsData);\n}\n\nexport function* deletePromotionById() {\n  yield takeEvery(DELETE_PROMOTION_BY_ID, deletePromotionByIdData);\n}\n\nexport function* createANewPromotion() {\n  yield takeEvery(CREATE_A_NEW_PROMOTION, createANewPromotionData);\n}\n\nexport function* putPromotion() {\n  yield takeEvery(PUT_PROMOTION_DATA, putPromotionData);\n}\n\nexport function* putChangePromotion() {\n  yield takeEvery(CHANGE_HOTSALE_BANNER, putChangePromotionData);\n}\n\nexport function* assignANewHotSalePromotion() {\n  yield takeEvery(ASSIGN_A_NEW_HOT_SALE, putPromotionData);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(getAllPromotions),\n    fork(deletePromotionById),\n    fork(putPromotion),\n    fork(putChangePromotion),\n    fork(assignANewHotSalePromotion),\n    fork(createANewPromotion),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}