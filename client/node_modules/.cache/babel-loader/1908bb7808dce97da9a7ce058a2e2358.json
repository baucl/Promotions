{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { SEND_CREDENTIALS } from \"../constants/ActionTypes\";\nimport { controllerAutenticar } from \"../services/service\";\nimport { save_auth_success, message_auth, save_auth_data_success } from \"../actions/auth\";\n\nconst signInRequest = async (data) => await controllerAutenticar(data).then(response => response).catch(error => error);\n\nfunction* signInData({\n  payload\n}) {\n  let signInResposne = null;\n\n  try {\n    signInResposne = yield call(signInRequest, payload);\n\n    if (signInResposne != null && signInResposne.success) {\n      localStorage.setItem(\"user\", signInResposne.success);\n      localStorage.setItem(\"token\", signInResposne.value.token);\n      localStorage.setItem(\"tokenExpiration\", signInResposne.value.expiration);\n      yield put(save_auth_success(true));\n      yield put(save_auth_data_success(signInResposne.value.message));\n    } else {\n      yield put(message_auth(signInResposne.error.message));\n    }\n  } catch (error) {\n    yield put(message_auth(signInResposne.error.message));\n  }\n}\n\nexport function* signIn() {\n  yield takeEvery(SEND_CREDENTIALS, signInData);\n}\nexport default function* rootSaga() {\n  yield all([fork(signIn)]);\n}","map":{"version":3,"sources":["/Users/isracarballo/Desktop/DEV REPO/Promotions/client/src/sagas/auth.js"],"names":["all","call","fork","put","takeEvery","SEND_CREDENTIALS","controllerAutenticar","save_auth_success","message_auth","save_auth_data_success","signInRequest","data","then","response","catch","error","signInData","payload","signInResposne","success","localStorage","setItem","value","token","expiration","message","signIn","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SACEC,iBADF,EAEEC,YAFF,EAGEC,sBAHF,QAIO,iBAJP;;AAMA,MAAMC,aAAa,GAAG,OAAOC,IAAP,KACpB,MAAML,oBAAoB,CAACK,IAAD,CAApB,CACHC,IADG,CACGC,QAAD,IAAcA,QADhB,EAEHC,KAFG,CAEIC,KAAD,IAAWA,KAFd,CADR;;AAKA,UAAUC,UAAV,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAkC;AAChC,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAI;AACFA,IAAAA,cAAc,GAAG,MAAMjB,IAAI,CAACS,aAAD,EAAgBO,OAAhB,CAA3B;;AACA,QAAIC,cAAc,IAAI,IAAlB,IAA0BA,cAAc,CAACC,OAA7C,EAAsD;AACpDC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BH,cAAc,CAACC,OAA5C;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,cAAc,CAACI,KAAf,CAAqBC,KAAnD;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwCH,cAAc,CAACI,KAAf,CAAqBE,UAA7D;AACA,YAAMrB,GAAG,CAACI,iBAAiB,CAAC,IAAD,CAAlB,CAAT;AACA,YAAMJ,GAAG,CAACM,sBAAsB,CAACS,cAAc,CAACI,KAAf,CAAqBG,OAAtB,CAAvB,CAAT;AACD,KAND,MAMO;AACL,YAAMtB,GAAG,CAACK,YAAY,CAACU,cAAc,CAACH,KAAf,CAAqBU,OAAtB,CAAb,CAAT;AACD;AACF,GAXD,CAWE,OAAOV,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACK,YAAY,CAACU,cAAc,CAACH,KAAf,CAAqBU,OAAtB,CAAb,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,MAAV,GAAmB;AACxB,QAAMtB,SAAS,CAACC,gBAAD,EAAmBW,UAAnB,CAAf;AACD;AAED,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAM3B,GAAG,CAAC,CAACE,IAAI,CAACwB,MAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { SEND_CREDENTIALS } from \"../constants/ActionTypes\";\nimport { controllerAutenticar } from \"../services/service\";\nimport {\n  save_auth_success,\n  message_auth,\n  save_auth_data_success,\n} from \"../actions/auth\";\n\nconst signInRequest = async (data) =>\n  await controllerAutenticar(data)\n    .then((response) => response)\n    .catch((error) => error);\n\nfunction* signInData({ payload }) {\n  let signInResposne = null;\n  try {\n    signInResposne = yield call(signInRequest, payload);\n    if (signInResposne != null && signInResposne.success) {\n      localStorage.setItem(\"user\", signInResposne.success);\n      localStorage.setItem(\"token\", signInResposne.value.token);\n      localStorage.setItem(\"tokenExpiration\", signInResposne.value.expiration);\n      yield put(save_auth_success(true));\n      yield put(save_auth_data_success(signInResposne.value.message));\n    } else {\n      yield put(message_auth(signInResposne.error.message));\n    }\n  } catch (error) {\n    yield put(message_auth(signInResposne.error.message));\n  }\n}\n\nexport function* signIn() {\n  yield takeEvery(SEND_CREDENTIALS, signInData);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(signIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}